{% if dehydrated | cert_exists(elasticsearch.domain) and elasticsearch.use_dehydrated %}
server {
  listen 0.0.0.0:80;
  listen [::]:80;
  {% if ansible_local.proserver | default(none) and ansible_local.proserver.routing.with_gate64 -%}
  listen [::1]:87 proxy_protocol;
  {%- endif %}

  server_name {{ elasticsearch.domain }};

  root /var/null;

  location / {
    return 301 https://$host$request_uri;
  }

  include {{ nginx.prefix.config }}/include/letsencrypt.conf;
}

server {
  listen 0.0.0.0:443 ssl http2;
  listen [::]:443 ssl http2;

  server_name {{ elasticsearch.domain }};

  include {{ nginx.prefix.config }}/include/security_headers.conf;

  location / {
    proxy_pass http://127.0.0.1:9200;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
  }

  ssl_certificate {{ dehydrated | cert_fullchain(elasticsearch.domain) }};
  ssl_certificate_key {{ dehydrated | cert_privkey(elasticsearch.domain) }};
  ssl_trusted_certificate {{ dehydrated | cert_chain(elasticsearch.domain) }};
  include {{ nginx.prefix.config }}/include/https_params.conf;
}
{% else %}

server {
  listen 0.0.0.0:80;
  listen [::]:80;

  server_name {{ elasticsearch.domain }};

  location / {
    proxy_pass http://127.0.0.1:9200;
    proxy_http_version 1.1;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_pass_header Access-Control-Allow-Origin;
    proxy_pass_header Access-Control-Allow-Methods;
    proxy_hide_header Access-Control-Allow-Headers;
    add_header Access-Control-Allow-Headers 'X-Requested-With, Content-Type';
    add_header Access-Control-Allow-Credentials true;
  }
}
{% endif %}
